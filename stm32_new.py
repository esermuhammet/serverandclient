{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7cf40e22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sunucuya bağlandı.\n",
      "Sunucuya gönderilen komut: write*4*57\n",
      "Sunucuya gönderilen komut: write*5*93\n",
      "Sunucuya gönderilen komut: write*6*269\n",
      "Sunucuya gönderilen komut: write*4*22\n",
      "Sunucuya gönderilen komut: write*5*108\n",
      "Sunucuya gönderilen komut: write*6*202\n",
      "Sunucuya gönderilen komut: write*4*46\n",
      "Sunucuya gönderilen komut: write*5*124\n",
      "Sunucuya gönderilen komut: write*6*165\n",
      "Sunucuya gönderilen komut: write*4*16\n",
      "Sunucuya gönderilen komut: write*5*95\n",
      "Sunucuya gönderilen komut: write*6*162\n",
      "Sunucuya gönderilen komut: write*4*38\n",
      "Sunucuya gönderilen komut: write*5*170\n",
      "Sunucuya gönderilen komut: write*6*245\n",
      "Sunucuya gönderilen komut: write*4*100\n",
      "Sunucuya gönderilen komut: write*5*112\n",
      "Sunucuya gönderilen komut: write*6*161\n",
      "Sunucuya gönderilen komut: write*4*44\n",
      "Sunucuya gönderilen komut: write*5*128\n",
      "Sunucuya gönderilen komut: write*6*200\n",
      "Sunucuya gönderilen komut: write*4*27\n",
      "Sunucuya gönderilen komut: write*5*157\n",
      "Sunucuya gönderilen komut: write*6*147\n",
      "Sunucuya gönderilen komut: write*4*90\n",
      "Sunucuya gönderilen komut: write*5*118\n",
      "Sunucuya gönderilen komut: write*6*196\n",
      "Sunucuya gönderilen komut: write*4*49\n",
      "Sunucuya gönderilen komut: write*5*131\n",
      "Sunucuya gönderilen komut: write*6*214\n"
     ]
    }
   ],
   "source": [
    "import socket\n",
    "import threading\n",
    "import random\n",
    "import time\n",
    "\n",
    "class Client:\n",
    "    def __init__(self, host, port):\n",
    "        self.host = host\n",
    "        self.port = port\n",
    "        self.client_socket = None\n",
    "        self.send_data = False\n",
    "        self.lock = threading.Lock()\n",
    "\n",
    "    def connect_to_server(self):\n",
    "        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
    "        try:\n",
    "            self.client_socket.connect((self.host, self.port))\n",
    "            print(\"Sunucuya bağlandı.\")\n",
    "            self.start_sending_data_thread = threading.Thread(target=self.start_sending_data)\n",
    "            self.start_sending_data_thread.start()\n",
    "        except Exception as e:\n",
    "            print(\"Sunucuya bağlanırken bir hata oluştu:\", e)\n",
    "\n",
    "    def disconnect_from_server(self):\n",
    "        if self.client_socket:\n",
    "            self.client_socket.close()\n",
    "            print(\"Sunucudan bağlantı kesildi.\")\n",
    "            self.stop_sending_data()\n",
    "        else:\n",
    "            print(\"Hata: Bağlantı henüz kurulmamış.\")\n",
    "\n",
    "    def send_command(self, command):\n",
    "        if self.client_socket:\n",
    "            try:\n",
    "                self.client_socket.send(command.encode())\n",
    "               \n",
    "            except Exception as e:\n",
    "                print(\"Sunucuya komut gönderirken bir hata oluştu:\", e)\n",
    "\n",
    "    def start_sending_data(self):\n",
    "        self.send_data = True\n",
    "        while self.send_data:\n",
    "            try:\n",
    "                temperature_value = random.randint(0, 100)\n",
    "                speed_value = random.randint(90, 180)\n",
    "                voltage_value = random.randint(120, 360)\n",
    "            \n",
    "                # Rastgele verileri gönder\n",
    "                self.send_command(f\"write*4*{temperature_value}\")\n",
    "                print(f\"Sunucuya gönderilen komut: write*4*{temperature_value}\")\n",
    "                time.sleep(0.0001)  # Her 4 saniyede bir gönder\n",
    "            \n",
    "                self.send_command(f\"write*5*{speed_value}\")\n",
    "                print(f\"Sunucuya gönderilen komut: write*5*{speed_value}\")\n",
    "                time.sleep(0.0001)  # Her 4 saniyede bir gönder\n",
    "            \n",
    "                self.send_command(f\"write*6*{voltage_value}\")\n",
    "                print(f\"Sunucuya gönderilen komut: write*6*{voltage_value}\")\n",
    "                time.sleep(4)  # Her 4 saniyede bir gönder\n",
    "            \n",
    "            except Exception as e:\n",
    "                print(\"Veri gönderirken bir hata oluştu:\", e)\n",
    "                self.stop_sending_data()\n",
    "\n",
    "    def stop_sending_data(self):\n",
    "        self.send_data = False\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    client = Client('127.0.0.1', 7545)\n",
    "    client.connect_to_server()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6931cfb8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5df437fb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
